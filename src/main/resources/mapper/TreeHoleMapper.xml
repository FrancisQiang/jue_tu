<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tf.dao.TreeHoleMapper">
  <resultMap id="BaseResultMap" type="com.tf.entity.TreeHole">
    <id column="tree_hole_id" jdbcType="INTEGER" property="treeHoleId" />
    <result column="tree_hole_user_id" jdbcType="INTEGER" property="treeHoleUserId" />
    <result column="tree_hole_create_time" jdbcType="TIMESTAMP" property="treeHoleCreateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.tf.entity.TreeHole">
    <result column="tree_hole_content" jdbcType="LONGVARCHAR" property="treeHoleContent" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    tree_hole_id, tree_hole_user_id, tree_hole_create_time
  </sql>
  <sql id="Blob_Column_List">
    tree_hole_content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.tf.entity.TreeHoleExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tree_hole
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.tf.entity.TreeHoleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tree_hole
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tree_hole
    where tree_hole_id = #{treeHoleId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tree_hole
    where tree_hole_id = #{treeHoleId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.tf.entity.TreeHoleExample">
    delete from tree_hole
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.tf.entity.TreeHole">
    insert into tree_hole (tree_hole_id, tree_hole_user_id, tree_hole_create_time, 
      tree_hole_content)
    values (#{treeHoleId,jdbcType=INTEGER}, #{treeHoleUserId,jdbcType=INTEGER}, #{treeHoleCreateTime,jdbcType=TIMESTAMP}, 
      #{treeHoleContent,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.tf.entity.TreeHole">
    insert into tree_hole
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="treeHoleId != null">
        tree_hole_id,
      </if>
      <if test="treeHoleUserId != null">
        tree_hole_user_id,
      </if>
      <if test="treeHoleCreateTime != null">
        tree_hole_create_time,
      </if>
      <if test="treeHoleContent != null">
        tree_hole_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="treeHoleId != null">
        #{treeHoleId,jdbcType=INTEGER},
      </if>
      <if test="treeHoleUserId != null">
        #{treeHoleUserId,jdbcType=INTEGER},
      </if>
      <if test="treeHoleCreateTime != null">
        #{treeHoleCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="treeHoleContent != null">
        #{treeHoleContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.tf.entity.TreeHoleExample" resultType="java.lang.Long">
    select count(*) from tree_hole
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tree_hole
    <set>
      <if test="record.treeHoleId != null">
        tree_hole_id = #{record.treeHoleId,jdbcType=INTEGER},
      </if>
      <if test="record.treeHoleUserId != null">
        tree_hole_user_id = #{record.treeHoleUserId,jdbcType=INTEGER},
      </if>
      <if test="record.treeHoleCreateTime != null">
        tree_hole_create_time = #{record.treeHoleCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.treeHoleContent != null">
        tree_hole_content = #{record.treeHoleContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update tree_hole
    set tree_hole_id = #{record.treeHoleId,jdbcType=INTEGER},
      tree_hole_user_id = #{record.treeHoleUserId,jdbcType=INTEGER},
      tree_hole_create_time = #{record.treeHoleCreateTime,jdbcType=TIMESTAMP},
      tree_hole_content = #{record.treeHoleContent,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tree_hole
    set tree_hole_id = #{record.treeHoleId,jdbcType=INTEGER},
      tree_hole_user_id = #{record.treeHoleUserId,jdbcType=INTEGER},
      tree_hole_create_time = #{record.treeHoleCreateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.tf.entity.TreeHole">
    update tree_hole
    <set>
      <if test="treeHoleUserId != null">
        tree_hole_user_id = #{treeHoleUserId,jdbcType=INTEGER},
      </if>
      <if test="treeHoleCreateTime != null">
        tree_hole_create_time = #{treeHoleCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="treeHoleContent != null">
        tree_hole_content = #{treeHoleContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where tree_hole_id = #{treeHoleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.tf.entity.TreeHole">
    update tree_hole
    set tree_hole_user_id = #{treeHoleUserId,jdbcType=INTEGER},
      tree_hole_create_time = #{treeHoleCreateTime,jdbcType=TIMESTAMP},
      tree_hole_content = #{treeHoleContent,jdbcType=LONGVARCHAR}
    where tree_hole_id = #{treeHoleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tf.entity.TreeHole">
    update tree_hole
    set tree_hole_user_id = #{treeHoleUserId,jdbcType=INTEGER},
      tree_hole_create_time = #{treeHoleCreateTime,jdbcType=TIMESTAMP}
    where tree_hole_id = #{treeHoleId,jdbcType=INTEGER}
  </update>
</mapper>