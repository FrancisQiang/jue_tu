<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tf.dao.BlogCommentMapper">
  <resultMap id="BaseResultMap" type="com.tf.entity.BlogComment">
    <id column="blog_comment_id" jdbcType="INTEGER" property="blogCommentId" />
    <result column="blog_comment_pid" jdbcType="INTEGER" property="blogCommentPid" />
    <result column="blog_id" jdbcType="INTEGER" property="blogId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="user_avatar" jdbcType="VARCHAR" property="userAvatar" />
    <result column="blog_comment_create_time" jdbcType="TIMESTAMP" property="blogCommentCreateTime" />
    <result column="blog_comment_delete_flag" jdbcType="BIT" property="blogCommentDeleteFlag" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.tf.entity.BlogComment">
    <result column="blog_comment_content" jdbcType="LONGVARCHAR" property="blogCommentContent" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    blog_comment_id, blog_comment_pid, blog_id, user_id, user_name, user_avatar, blog_comment_create_time, 
    blog_comment_delete_flag
  </sql>
  <sql id="Blob_Column_List">
    blog_comment_content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.tf.entity.BlogCommentExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.tf.entity.BlogCommentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from blog_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_comment
    where blog_comment_id = #{blogCommentId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from blog_comment
    where blog_comment_id = #{blogCommentId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.tf.entity.BlogCommentExample">
    delete from blog_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.tf.entity.BlogComment">
    insert into blog_comment (blog_comment_id, blog_comment_pid, blog_id, 
      user_id, user_name, user_avatar, 
      blog_comment_create_time, blog_comment_delete_flag, 
      blog_comment_content)
    values (#{blogCommentId,jdbcType=INTEGER}, #{blogCommentPid,jdbcType=INTEGER}, #{blogId,jdbcType=INTEGER}, 
      #{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{userAvatar,jdbcType=VARCHAR}, 
      #{blogCommentCreateTime,jdbcType=TIMESTAMP}, #{blogCommentDeleteFlag,jdbcType=BIT}, 
      #{blogCommentContent,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.tf.entity.BlogComment">
    insert into blog_comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="blogCommentId != null">
        blog_comment_id,
      </if>
      <if test="blogCommentPid != null">
        blog_comment_pid,
      </if>
      <if test="blogId != null">
        blog_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="userAvatar != null">
        user_avatar,
      </if>
      <if test="blogCommentCreateTime != null">
        blog_comment_create_time,
      </if>
      <if test="blogCommentDeleteFlag != null">
        blog_comment_delete_flag,
      </if>
      <if test="blogCommentContent != null">
        blog_comment_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="blogCommentId != null">
        #{blogCommentId,jdbcType=INTEGER},
      </if>
      <if test="blogCommentPid != null">
        #{blogCommentPid,jdbcType=INTEGER},
      </if>
      <if test="blogId != null">
        #{blogId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userAvatar != null">
        #{userAvatar,jdbcType=VARCHAR},
      </if>
      <if test="blogCommentCreateTime != null">
        #{blogCommentCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="blogCommentDeleteFlag != null">
        #{blogCommentDeleteFlag,jdbcType=BIT},
      </if>
      <if test="blogCommentContent != null">
        #{blogCommentContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.tf.entity.BlogCommentExample" resultType="java.lang.Long">
    select count(*) from blog_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update blog_comment
    <set>
      <if test="record.blogCommentId != null">
        blog_comment_id = #{record.blogCommentId,jdbcType=INTEGER},
      </if>
      <if test="record.blogCommentPid != null">
        blog_comment_pid = #{record.blogCommentPid,jdbcType=INTEGER},
      </if>
      <if test="record.blogId != null">
        blog_id = #{record.blogId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.userName != null">
        user_name = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.userAvatar != null">
        user_avatar = #{record.userAvatar,jdbcType=VARCHAR},
      </if>
      <if test="record.blogCommentCreateTime != null">
        blog_comment_create_time = #{record.blogCommentCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.blogCommentDeleteFlag != null">
        blog_comment_delete_flag = #{record.blogCommentDeleteFlag,jdbcType=BIT},
      </if>
      <if test="record.blogCommentContent != null">
        blog_comment_content = #{record.blogCommentContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update blog_comment
    set blog_comment_id = #{record.blogCommentId,jdbcType=INTEGER},
      blog_comment_pid = #{record.blogCommentPid,jdbcType=INTEGER},
      blog_id = #{record.blogId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      user_name = #{record.userName,jdbcType=VARCHAR},
      user_avatar = #{record.userAvatar,jdbcType=VARCHAR},
      blog_comment_create_time = #{record.blogCommentCreateTime,jdbcType=TIMESTAMP},
      blog_comment_delete_flag = #{record.blogCommentDeleteFlag,jdbcType=BIT},
      blog_comment_content = #{record.blogCommentContent,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update blog_comment
    set blog_comment_id = #{record.blogCommentId,jdbcType=INTEGER},
      blog_comment_pid = #{record.blogCommentPid,jdbcType=INTEGER},
      blog_id = #{record.blogId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      user_name = #{record.userName,jdbcType=VARCHAR},
      user_avatar = #{record.userAvatar,jdbcType=VARCHAR},
      blog_comment_create_time = #{record.blogCommentCreateTime,jdbcType=TIMESTAMP},
      blog_comment_delete_flag = #{record.blogCommentDeleteFlag,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.tf.entity.BlogComment">
    update blog_comment
    <set>
      <if test="blogCommentPid != null">
        blog_comment_pid = #{blogCommentPid,jdbcType=INTEGER},
      </if>
      <if test="blogId != null">
        blog_id = #{blogId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userAvatar != null">
        user_avatar = #{userAvatar,jdbcType=VARCHAR},
      </if>
      <if test="blogCommentCreateTime != null">
        blog_comment_create_time = #{blogCommentCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="blogCommentDeleteFlag != null">
        blog_comment_delete_flag = #{blogCommentDeleteFlag,jdbcType=BIT},
      </if>
      <if test="blogCommentContent != null">
        blog_comment_content = #{blogCommentContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where blog_comment_id = #{blogCommentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.tf.entity.BlogComment">
    update blog_comment
    set blog_comment_pid = #{blogCommentPid,jdbcType=INTEGER},
      blog_id = #{blogId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      user_name = #{userName,jdbcType=VARCHAR},
      user_avatar = #{userAvatar,jdbcType=VARCHAR},
      blog_comment_create_time = #{blogCommentCreateTime,jdbcType=TIMESTAMP},
      blog_comment_delete_flag = #{blogCommentDeleteFlag,jdbcType=BIT},
      blog_comment_content = #{blogCommentContent,jdbcType=LONGVARCHAR}
    where blog_comment_id = #{blogCommentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tf.entity.BlogComment">
    update blog_comment
    set blog_comment_pid = #{blogCommentPid,jdbcType=INTEGER},
      blog_id = #{blogId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      user_name = #{userName,jdbcType=VARCHAR},
      user_avatar = #{userAvatar,jdbcType=VARCHAR},
      blog_comment_create_time = #{blogCommentCreateTime,jdbcType=TIMESTAMP},
      blog_comment_delete_flag = #{blogCommentDeleteFlag,jdbcType=BIT}
    where blog_comment_id = #{blogCommentId,jdbcType=INTEGER}
  </update>
</mapper>